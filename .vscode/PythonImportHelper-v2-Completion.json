[
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "sys,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys.",
        "description": "sys.",
        "detail": "sys.",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "perf_counter",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "tkinter",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tkinter",
        "description": "tkinter",
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "filedialog",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "messagebox",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "setup",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "find_packages",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "PBM",
        "importPath": "pbm.pbm",
        "description": "pbm.pbm",
        "isExtraImport": true,
        "detail": "pbm.pbm",
        "documentation": {}
    },
    {
        "label": "bin_dir",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "bin_dir = os.path.dirname(abs_file)\nbase = bin_dir[: -len(\"Scripts\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "base = bin_dir[: -len(\"Scripts\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"PATH\"]",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV\"]",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV_PROMPT\"]",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "prev_length",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "prev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.path[:]",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.real_prefix",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "sys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.prefix",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "sys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "pbm.cli",
        "description": "pbm.cli",
        "peekOfCode": "def main() -> None:\n    try:\n        command: str = sys.argv[1] if len(sys.argv) > 1 else \"console\"\n        if get_pbm().get_version() != get_pbm().latest_version:\n            logger.warning(f\"this pbm repo is outdated. (current='{get_pbm().get_version()}' latest='{get_pbm().latest_version}')\")\n            logger.warning(\"use `pbm reinit` to upgrade.\")\n        match command:\n            case \"init\":\n                get_pbm().init()\n            case \"reinit\":",
        "detail": "pbm.cli",
        "documentation": {}
    },
    {
        "label": "continue_in_terminal_popup",
        "kind": 2,
        "importPath": "pbm.desktop",
        "description": "pbm.desktop",
        "peekOfCode": "def continue_in_terminal_popup(_ = None) -> None:\n    messagebox.showinfo(\"message\", \"please continue in the terminal.\")\ndef fetch_input(*find: str) -> tuple[str, ...]:\n    continue_in_terminal_popup()\n    r: list[str] = []\n    for f in find:\n        r.append(input(f\"please enter the {f} >> \"))\n    return (*r,)\ndef open_pbm_project(path: str) -> None:\n    logs: list[str] = [",
        "detail": "pbm.desktop",
        "documentation": {}
    },
    {
        "label": "fetch_input",
        "kind": 2,
        "importPath": "pbm.desktop",
        "description": "pbm.desktop",
        "peekOfCode": "def fetch_input(*find: str) -> tuple[str, ...]:\n    continue_in_terminal_popup()\n    r: list[str] = []\n    for f in find:\n        r.append(input(f\"please enter the {f} >> \"))\n    return (*r,)\ndef open_pbm_project(path: str) -> None:\n    logs: list[str] = [\n        f\"info: a path was passed to pbm.ui successfully: '{path}'\"\n    ]",
        "detail": "pbm.desktop",
        "documentation": {}
    },
    {
        "label": "open_pbm_project",
        "kind": 2,
        "importPath": "pbm.desktop",
        "description": "pbm.desktop",
        "peekOfCode": "def open_pbm_project(path: str) -> None:\n    logs: list[str] = [\n        f\"info: a path was passed to pbm.ui successfully: '{path}'\"\n    ]\n    if not path.lower().startswith(\"c:\"):\n        messagebox.showerror(\"error\", f\"'{path}' is not supported. please enter an absolute path ('c:/...')\")\n        return\n    os.chdir(path)\n    logs.append(f\"info: changed working directory to '{path}'\")\n    if \".pbm\" in os.listdir(path):",
        "detail": "pbm.desktop",
        "documentation": {}
    },
    {
        "label": "launch_pbm_desktop",
        "kind": 2,
        "importPath": "pbm.desktop",
        "description": "pbm.desktop",
        "peekOfCode": "def launch_pbm_desktop() -> None:\n    root: tk.Tk = tk.Tk()\n    root.title(\"pbm control panel (no directory open)\")\n    tk.Label(root, text=\"open or init a project\", font=\"arial 20 bold\").pack(pady=10)\n    tk.Label(root, text=\"choose a path:\").pack(pady=20)\n    entry: tk.Entry = tk.Entry(root, width=60)\n    entry.pack(pady=10)\n    tk.Button(root, text=\"open\", command=lambda: open_pbm_project(entry.get())).pack(pady=10)\n    tk.Label(root, text=\"-- or --\", font=\"arial 13 bold\").pack(pady=10)\n    tk.Button(root, text=\"choose in explorer\", command=lambda: open_pbm_project(filedialog.askdirectory(",
        "detail": "pbm.desktop",
        "documentation": {}
    },
    {
        "label": "get_pbm",
        "kind": 2,
        "importPath": "pbm.get_pbm",
        "description": "pbm.get_pbm",
        "peekOfCode": "def get_pbm() -> PBM:\n    return PBM()\ndef get_base() -> PBM.Base:\n    pbm: PBM = get_pbm()\n    return pbm.Base(pbm)\ndef run_pbm(obj: str | Callable, command: str, *args, **kwargs) -> Any:\n    obj = eval(obj, {\n        \"get_pbm\": get_pbm,\n        \"get_base\": get_base\n    })() if isinstance(obj, str) else obj",
        "detail": "pbm.get_pbm",
        "documentation": {}
    },
    {
        "label": "get_base",
        "kind": 2,
        "importPath": "pbm.get_pbm",
        "description": "pbm.get_pbm",
        "peekOfCode": "def get_base() -> PBM.Base:\n    pbm: PBM = get_pbm()\n    return pbm.Base(pbm)\ndef run_pbm(obj: str | Callable, command: str, *args, **kwargs) -> Any:\n    obj = eval(obj, {\n        \"get_pbm\": get_pbm,\n        \"get_base\": get_base\n    })() if isinstance(obj, str) else obj\n    return getattr(obj, command)(*args, **kwargs)",
        "detail": "pbm.get_pbm",
        "documentation": {}
    },
    {
        "label": "run_pbm",
        "kind": 2,
        "importPath": "pbm.get_pbm",
        "description": "pbm.get_pbm",
        "peekOfCode": "def run_pbm(obj: str | Callable, command: str, *args, **kwargs) -> Any:\n    obj = eval(obj, {\n        \"get_pbm\": get_pbm,\n        \"get_base\": get_base\n    })() if isinstance(obj, str) else obj\n    return getattr(obj, command)(*args, **kwargs)",
        "detail": "pbm.get_pbm",
        "documentation": {}
    }
]